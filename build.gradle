plugins {
    id("idea")
    id("java-library")
    id("com.gtnewhorizons.retrofuturagradle") version "1.3.19"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("net.kyori.blossom") version "1.2.0"
}
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
}

version = "${mod_version}"
group = "trinsdar.ic2c_extras" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "IC2CExtras"

configurations {
    shadowImpl // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    implementation.extendsFrom shadowImpl
}

// Most RFG configuration lives here, see the JavaDoc for com.gtnewhorizons.retrofuturagradle.MinecraftExtension
minecraft {
    mcVersion.set("1.12.2")

    // Username for client run configurations
    username.set("Developer")

    // Generate a field named VERSION with the mod version in the injected Tags class
    //injectedTags.put("VERSION", project.version)

    // If you need the old replaceIn mechanism, prefer the injectTags task because it doesn't inject a javac plugin.
    //tagReplacementFiles.add("IC2CExtras.java")

    // Enable assertions in the mod's package when running the client or server
    extraRunJvmArguments.add("-ea:${project.group}")

    // If needed, add extra tweaker classes like for mixins.
    extraTweakClasses.add("org.spongepowered.asm.launch.MixinTweaker")

    // Exclude some Maven dependency groups from being automatically included in the reobfuscated runs
    groupsToExcludeFromAutoReobfMapping.addAll("com.diffplug", "com.diffplug.durian", "net.industrial-craft")
}

/*loom {
    launchConfigs {
        "client" {
            // If you don't want mixins, remove these lines
            property("mixin.debug", "true")
            property("asmhelper.verbose", "true")
            arg("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
            arg("--mixin", "mixins.ic2c_extras.json")
        }
    }
    forge {
        pack200Provider.set(new dev.architectury.pack200.java.Pack200Adapter())
        // If you don't want mixins, remove this lines
        mixinConfig("mixins.ic2c_extras.json")
    }
    // If you don't want mixins, remove these lines
    mixin {
        defaultRefmapName.set("mixins.ic2c_extras.refmap.json")
    }
}*/

/*minecraft {
    coreMod = "trinsdar.ic2c_extras.asm.Ic2cExtrasLoadingPlugin"

    replace "@VERSION@", project.version
    replaceIn "IC2CExtras.java"

}*/

blossom {
    var constants = "src/main/java/trinsdar/ic2c_extras/IC2CExtras.java"
    replaceToken("@VERSION@", project.version, constants)
}

repositories{
    maven { url "https://repo.spongepowered.org/repository/maven-public" }
    maven { // JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven { // The One Probe
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven { // Tesla
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
    maven {
        name = "jared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "buildcraft"
        url = "https://www.mod-buildcraft.com/maven/"
    }
    maven {
        name = "GTNH Maven"
        url = uri("http://jenkins.usrv.eu:8081/nexus/content/groups/public/")
        allowInsecureProtocol = true
    }
}

dependencies {
    //mappings("de.oceanlabs.mcp:mcp_snapshot:20171003-1.12")
    //forge("net.minecraftforge:forge:1.12.2-14.23.5.2808")
    implementation 'org.jetbrains:annotations:19.0.0'
    shadowImpl("org.spongepowered:mixin:0.8-SNAPSHOT"){
        transitive = false
    }
    annotationProcessor("org.spongepowered:mixin:0.8.4-SNAPSHOT")
    implementation(rfg.deobf("mezz.jei:jei_${forgemc_version}:${jei_version}:api"))
    runtimeOnly(rfg.deobf("mezz.jei:jei_${forgemc_version}:${jei_version}"))
    compileOnly(rfg.deobf("curse.maven:basemetals-240967:2712965"))
    compileOnly(rfg.deobf("curse.maven:modernmetals-244357:2712959"))
    compileOnly(rfg.deobf("curse.maven:orespawn-245586:2913786"))
    //one probe
    implementation(rfg.deobf('curse.maven:the-one-probe-245211:2667280'))
    implementation("curse.maven:crafttweaker-239197:3935788")

    implementation(rfg.deobf("curse.maven:buildcraft-61811:3204475"))

    //baubles
    compileOnly "curse.maven:gtclassic-324021:3475248"
    implementation "curse.maven:baubles-227083:2518667"
    compileOnly "curse.maven:railcraft-51195:2687757"
    implementation(rfg.deobf("curse.maven:ic2_classic-242942:4070210"))
}

processResources {

    def toReplace = [
            "modversion"             : "${mod_version}",
            "mcversion"              : "${mc_version}"
    ]

    inputs.properties toReplace
    filesMatching("mcmod.info") {
        expand toReplace
    }
}

/*reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}*/

/*task remapThinJar(type: Jar) {
    classifier "thin"
    input.set jar.archiveFile
    dependsOn jar
    manifest.attributes(
            "FMLCorePlugin": "trinsdar.ic2c_extras.asm.Ic2cExtrasLoadingPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            'ForceLoadAsMod': true,
            "TweakOrder": 0,
            "MixinConfigs": "mixins.ic2c_extras.json"
    )
}*/

shadowJar {
    configurations = [project.configurations.shadowImpl]
    classifier "dev-shadow"
}

/*remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    manifest.attributes(
            "FMLCorePlugin": "trinsdar.ic2c_extras.asm.Ic2cExtrasLoadingPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            'ForceLoadAsMod': true,
            "TweakOrder": 0,
            "MixinConfigs": "mixins.ic2c_extras.json"
    )
}*/

jar {
    classifier "dev"
    manifest.attributes(
            "FMLCorePlugin": "trinsdar.ic2c_extras.asm.Ic2cExtrasLoadingPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "MixinConfigs": "mixins.ic2c_extras.json"
    )
}

/*task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest.attributes(
            "FMLCorePlugin": "trinsdar.ic2c_extras.asm.Ic2cExtrasLoadingPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "MixinConfigs": "mixins.ic2c_extras.json"
    )
}*/

artifacts {
    //archives remapThinJar
    archives shadowJar
}
